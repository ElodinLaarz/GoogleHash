{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80306176},"metadata":{"file_extension":".py","language_info":{"codemirror_mode":{"name":"ipython","version":3},"name":"python","version":"3.7.3-final"},"mimetype":"text/x-python","name":"python","npconvert_exporter":"python","orig_nbformat":2,"pygments_lexer":"ipython3","version":3},"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"7ba4c5","input":"import numpy as np\nfrom typing import NamedTuple\nfrom collections import defaultdict","pos":0,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"9515a1","input":"min(a), max(a)","output":{"0":{"data":{"text/plain":"(1, 11830)"},"exec_count":11,"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"a9c5c2","input":"with open('data/qualification_round_2019/d_pet_pictures.txt') as file:\n    lines = file.read().splitlines()\n\nNUMSLIDES = lines[0]\nRAW_SLIDES = [line.split() for line in lines[1:]]\n\nclass Slide(NamedTuple):\n    type: str\n    len: int\n    tags: set\n    ordered_tags: list\n\nslides = [Slide(slide[0], int(slide[1]), set(slide[2:]), sorted(slide[2:])) for slide in RAW_SLIDES]","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"f2441b","input":"tags = set.union(*[slide.tags for slide in slides])\ntag_list = sorted(list(tags))","pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"b9ba17","input":"slides_H = sorted([slide.ordered_tags for slide in slides if slide.type == 'H']) #80000\nslides_V = sorted([slide.ordered_tags for slide in slides if slide.type == 'V']) #0","pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":51,"id":"1a2980","input":"def interest(slide1, slide2):\n    if slide1.type == 'H' and slide2.type == 'H':\n        S1 = len(slide1.tags - slide2.tags)\n        S2 = len(slide1.tags & slide2.tags)\n        S3 = len(slide2.tags - slide1.tags)\n        return min(S1,S2,S3)\n    else: \n        return None","pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"8f2a81","input":"buckets = iter(tag_list)\nbucket_dict = defaultdict(list)\ncurrent_bucket = next(buckets)\nfor slide in slides_V:\n    if slide[0] != current_bucket:\n        current_bucket = next(buckets)\n    bucket_dict[current_bucket].append(slide)\n        ","pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"ac42bd","input":"a = [len(o) for o in bucket_dict.values()]","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","id":"912c91","input":"","pos":8,"state":"done","type":"cell"}
{"id":0,"time":1580698086406,"type":"user"}
{"last_load":1580686131259,"type":"file"}
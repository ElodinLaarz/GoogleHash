{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":80044032},"metadata":{"file_extension":".py","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"mimetype":"text/x-python","name":"python","npconvert_exporter":"python","pygments_lexer":"ipython3","version":3},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":15,"id":"d6acbc","input":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import expon\nfrom scipy import stats\nfrom itertools import combinations as combowombo\nimport matplotlib.pyplot as plt","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"74139f","input":"import time\nstart = time.time()\n\nMAX = 385749466\nbest_output = []\nbest_total = 0\n\nif MAX < 5E6:\n    reps = 100000\nelif MAX < 50E6:\n    reps = 10000\nelif MAX < 500E6:\n    reps = 1000\nelse:\n    reps = 100\n\n#I collected some data on how long a particular best solution survives for and modeled it with a Weibull distribution.\n#I computed the relative liklihood that the best solution would survive 42 more rounds given it survived until time T.\n#If a solution survives 420 rounds, there is an 78% chance that it will survive 42 more rounds. This was good enough for me to call it\n#a winner early. This avoids situations where it is actually impossible to make the MAXSLICES. Yes, I did all this for a joke, but also,\n#It's efficient! Ish.\n\n#record_prob = []\ncounter = 0\n\nfor i in range(reps):\n    if best_total == MAX:\n        break\n    if counter >= 420:\n        break\n    output = compute_slices(max = MAX)\n    total = sum(output)\n    if total > best_total:\n        best_total = total\n        best_output = output\n        #if counter:\n        #    record_prob.append(counter)\n        counter = 0\n    else:\n        counter += 1\n\nprint(f'Total = {best_total} \\ndiff = {MAX - best_total}')\nprint(f'It took {time.time()-start} seconds!')","output":{"0":{"name":"stdout","output_type":"stream","text":"Total = 385749466 \ndiff = 0\nIt took 15.085638284683228 seconds!\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"136472","input":"with open('Data/d_quite_big.in') as file:\n    data = file.read().split()\n\ndata = [int(_) for _ in data]\nMAXSLICES = data[0]\nTYPES = data[1]\nPIZZAS = data[2:]\npizza_indices = {pizza: index for index, pizza in enumerate(PIZZAS)}","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"9a6398","input":"def create_sorted_prob_list(size = 1, dist = np.random.uniform, **kwargs):\n    prob_list = sorted(dist(size = size, **kwargs))\n    total = sum(prob_list)\n    prob_list = prob_list/total\n    return prob_list","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"b8efd7","input":"def expon_list(size = 1, scale = 1):\n    prob_list = sorted(np.array([(1/scale)*expon.pdf(x/scale) for x in range(size)]))\n    normed_list = prob_list/sum(prob_list)\n    return normed_list","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"999a90","input":"def all_slices(pizza_list):\n    possible_slices = sorted([sum(comb) for k in range(1,len(pizza_list)+1) for comb in combowombo(pizza_list,k)])\n    return possible_slices","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"9b6591","input":"def compute_slices(max = MAXSLICES, pizza_list = PIZZAS):\n    final_list = []\n    while (max >= 0):\n      admissible_pizzas = [pizza for pizza in pizza_list if pizza <= max]\n      if admissible_pizzas:\n        num_pizzas = len(admissible_pizzas)\n        prob_list = create_sorted_prob_list(size=num_pizzas, dist=np.random.exponential, scale = 0.0001)\n        index = np.random.choice(num_pizzas,p=prob_list)\n        rand_pizza = admissible_pizzas.pop(index)\n        pizza_list = admissible_pizzas\n        max = max - rand_pizza\n        final_list.append(rand_pizza)\n      else:\n        break\n    return final_list","pos":5,"type":"cell"}
{"cell_type":"code","id":"308d1d","input":"x = np.linspace(0,1000, 100)\nW = stats.weibull_min(*c)\nplt.plot(x,W.pdf(x))\n","pos":12,"type":"cell"}
{"cell_type":"code","id":"40ee65","input":"collected_prob.extend(record_prob)\ntd = pd.DataFrame(collected_prob)\ntd.plot.hist(bins=30)","pos":9,"type":"cell"}
{"cell_type":"code","id":"7757d7","input":"collected_prob = []","pos":8,"type":"cell"}
{"cell_type":"code","id":"90dc04","input":"Mama_Mia_Its_A_Pizza = sorted([pizza_indices[p] for p in best_output])","pos":7,"type":"cell"}
{"cell_type":"code","id":"a82189","input":"len(collected_prob)","pos":10,"type":"cell"}
{"cell_type":"code","id":"c06056","input":"c = stats.weibull_min.fit(collected_prob)\nc","pos":11,"type":"cell"}
{"cell_type":"code","id":"eceb87","input":"","pos":13,"type":"cell"}
{"last_load":1580686042667,"type":"file"}